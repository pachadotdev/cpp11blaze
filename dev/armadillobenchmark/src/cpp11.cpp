// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// 01_matrix_calculation.cpp
int matrix_calculation_01_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_matrix_calculation_01_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(matrix_calculation_01_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 01_matrix_calculation.cpp
int matrix_calculation_02_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_matrix_calculation_02_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(matrix_calculation_02_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 01_matrix_calculation.cpp
int matrix_calculation_03_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_matrix_calculation_03_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(matrix_calculation_03_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 01_matrix_calculation.cpp
int matrix_calculation_04_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_matrix_calculation_04_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(matrix_calculation_04_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 01_matrix_calculation.cpp
int matrix_calculation_05_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_matrix_calculation_05_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(matrix_calculation_05_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 02_matrix_functions.cpp
int matrix_functions_01_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_matrix_functions_01_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(matrix_functions_01_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 02_matrix_functions.cpp
int matrix_functions_02_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_matrix_functions_02_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(matrix_functions_02_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 02_matrix_functions.cpp
int matrix_functions_03_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_matrix_functions_03_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(matrix_functions_03_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 02_matrix_functions.cpp
int matrix_functions_04_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_matrix_functions_04_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(matrix_functions_04_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 02_matrix_functions.cpp
int matrix_functions_05_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_matrix_functions_05_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(matrix_functions_05_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 03_programmation.cpp
int programmation_01_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_programmation_01_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(programmation_01_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 03_programmation.cpp
int programmation_02_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_programmation_02_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(programmation_02_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 03_programmation.cpp
int programmation_03_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_programmation_03_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(programmation_03_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 03_programmation.cpp
int programmation_04_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_programmation_04_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(programmation_04_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// 03_programmation.cpp
int programmation_05_arma_(const int& n);
extern "C" SEXP _armadillobenchmark_programmation_05_arma_(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(programmation_05_arma_(cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_armadillobenchmark_matrix_calculation_01_arma_", (DL_FUNC) &_armadillobenchmark_matrix_calculation_01_arma_, 1},
    {"_armadillobenchmark_matrix_calculation_02_arma_", (DL_FUNC) &_armadillobenchmark_matrix_calculation_02_arma_, 1},
    {"_armadillobenchmark_matrix_calculation_03_arma_", (DL_FUNC) &_armadillobenchmark_matrix_calculation_03_arma_, 1},
    {"_armadillobenchmark_matrix_calculation_04_arma_", (DL_FUNC) &_armadillobenchmark_matrix_calculation_04_arma_, 1},
    {"_armadillobenchmark_matrix_calculation_05_arma_", (DL_FUNC) &_armadillobenchmark_matrix_calculation_05_arma_, 1},
    {"_armadillobenchmark_matrix_functions_01_arma_",   (DL_FUNC) &_armadillobenchmark_matrix_functions_01_arma_,   1},
    {"_armadillobenchmark_matrix_functions_02_arma_",   (DL_FUNC) &_armadillobenchmark_matrix_functions_02_arma_,   1},
    {"_armadillobenchmark_matrix_functions_03_arma_",   (DL_FUNC) &_armadillobenchmark_matrix_functions_03_arma_,   1},
    {"_armadillobenchmark_matrix_functions_04_arma_",   (DL_FUNC) &_armadillobenchmark_matrix_functions_04_arma_,   1},
    {"_armadillobenchmark_matrix_functions_05_arma_",   (DL_FUNC) &_armadillobenchmark_matrix_functions_05_arma_,   1},
    {"_armadillobenchmark_programmation_01_arma_",      (DL_FUNC) &_armadillobenchmark_programmation_01_arma_,      1},
    {"_armadillobenchmark_programmation_02_arma_",      (DL_FUNC) &_armadillobenchmark_programmation_02_arma_,      1},
    {"_armadillobenchmark_programmation_03_arma_",      (DL_FUNC) &_armadillobenchmark_programmation_03_arma_,      1},
    {"_armadillobenchmark_programmation_04_arma_",      (DL_FUNC) &_armadillobenchmark_programmation_04_arma_,      1},
    {"_armadillobenchmark_programmation_05_arma_",      (DL_FUNC) &_armadillobenchmark_programmation_05_arma_,      1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_armadillobenchmark(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
